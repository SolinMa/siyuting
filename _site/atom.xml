<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-22T14:28:30+08:00</updated><id>http://localhost:4000/</id><title type="html">SiyuTing</title><subtitle>午后小憩，岂不妙哉。</subtitle><author><name>Solin</name></author><entry><title type="html">CastError\: Cast to string failed for value “{}” at path “flow_id” for model “iflow_steps”</title><link href="http://localhost:4000/code/2018/03/21/CastError-Cast-to-string-failed-for-value-at-path-flow_id-for-model-iflow_steps/" rel="alternate" type="text/html" title="CastError\: Cast to string failed for value &quot;{}&quot; at path &quot;flow_id&quot; for model &quot;iflow_steps&quot;" /><published>2018-03-21T18:00:00+08:00</published><updated>2018-03-21T18:00:00+08:00</updated><id>http://localhost:4000/code/2018/03/21/CastError:%20Cast%20to%20string%20failed%20for%20value%20%22%7B%7D%22%20at%20path%20%22flow_id%22%20for%20model%20%22iflow_steps%22</id><content type="html" xml:base="http://localhost:4000/code/2018/03/21/CastError-Cast-to-string-failed-for-value-at-path-flow_id-for-model-iflow_steps/">&lt;p&gt;##错误代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CastError: Cast to string failed for value &quot;{}&quot; at path &quot;flow_id&quot; for model &quot;iflow_steps&quot;
    at new CastError (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/error/cast.js:26:11)
    at SchemaString.cast (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/schema/string.js:458:9)
    at SchemaString.SchemaType._castForQuery (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/schematype.js:1064:15)
    at SchemaString.castForQuery (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/schema/string.js:513:15)
    at /data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/schematype.js:991:18
    at Array.map (&amp;lt;anonymous&amp;gt;)
    at SchemaString.handleArray (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/schematype.js:990:14)
    at SchemaString.castForQuery (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/schema/string.js:506:20)
    at SchemaString.SchemaType.castForQueryWrapper (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/schematype.js:1016:17)
    at cast (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/cast.js:249:39)
    at model.Query.Query.cast (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/query.js:3090:12)
    at model.Query.Query._castConditions (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/query.js:1144:10)
    at model.Query.Query._find (/data/www/htdocs/rd-iflow2/node_modules/mongoose/lib/query.js:1159:8)
    at /data/www/htdocs/rd-iflow2/node_modules/kareem/index.js:250:8
    at /data/www/htdocs/rd-iflow2/node_modules/kareem/index.js:23:7
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickDomainCallback (internal/process/next_tick.js:218:9)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##错误原因&lt;/p&gt;

&lt;p&gt;上代码先&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var _Schema = new model.Schema({
    ...
    flow_id              : String,
    ...
}, { versionKey: false });
...
let iflowIds = await Iflow.schema.distinct('_id',{app_id:{$in:smartAppIds},current_step_type:{$ne:'end'}}).execAsync();
// 此处iflowIds是ObjectId的数组，下一行拿来$in查询flow_id，结果IflowStep的model里面flow_id字段规定的是String类型，因此报错
let iflowSteps = await IflowStep.schema.find({flow_id:{$in:iflowIds},$or:conditions}).select('_id app_id step_key').execAsync();
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##解决方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
let iflowIds = await Iflow.schema.distinct('_id',{app_id:{$in:smartAppIds},current_step_type:{$ne:'end'}}).execAsync();
let iflowIdsCopy = iflowIds.map(id=&amp;gt;id.toString());
// 此处将ObjectId的数组转换成String数组就可以了。
let iflowSteps = await IflowStep.schema.find({flow_id:{$in:iflowIdsCopy},$or:conditions}).select('_id app_id step_key').execAsync();
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Solin</name></author><category term="[&quot;Code&quot;]" /><category term="erroe" /><category term="js" /><category term="mongodb" /><category term="mongoose" /><category term="node" /><summary type="html">##错误代码</summary></entry><entry><title type="html">用react动手实现底部导航菜单</title><link href="http://localhost:4000/code/2018/03/21/%E7%94%A8react%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95/" rel="alternate" type="text/html" title="用react动手实现底部导航菜单" /><published>2018-03-21T18:00:00+08:00</published><updated>2018-03-21T18:00:00+08:00</updated><id>http://localhost:4000/code/2018/03/21/%E7%94%A8react%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95</id><content type="html" xml:base="http://localhost:4000/code/2018/03/21/%E7%94%A8react%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95/">&lt;p&gt;#用react动手实现底部导航菜单
##使用create-react-app创建项目结构
安装和初始化&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g create-react-app

# 注意：工具会自动初始化一个脚手架并安装 React 项目的各种必要依赖，如果在过程中出现网络问题，请尝试配置代理或使用其他 npm registry。
$ create-react-app tabs-react

$ cd tabs-react
$ npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;打开 http://localhost:3000/ 访问你的应用。&lt;/p&gt;
&lt;h2 id=&quot;安装react-router4&quot;&gt;安装react-router@4&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -S react-router react-router-dom
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Solin</name></author><category term="[&quot;Code&quot;]" /><category term="react" /><category term="react-router" /><category term="shell" /><category term="js" /><category term="jsx" /><summary type="html">#用react动手实现底部导航菜单 ##使用create-react-app创建项目结构 安装和初始化 ``` $ npm install -g create-react-app</summary></entry><entry><title type="html">pm2常用命令</title><link href="http://localhost:4000/code/2018/03/20/pm2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" rel="alternate" type="text/html" title="pm2常用命令" /><published>2018-03-20T12:00:00+08:00</published><updated>2018-03-20T12:00:00+08:00</updated><id>http://localhost:4000/code/2018/03/20/pm2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="http://localhost:4000/code/2018/03/20/pm2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">&lt;blockquote&gt;
  &lt;p&gt;pm2 是一个带有负载均衡功能的Node应用的进程管理器。  &lt;br /&gt;
当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载，pm2是完美的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pm2 start &amp;lt;id|name&amp;gt; -i 4 #后台运行pm2，启动4个app.js
$ pm2 start app.js --name &amp;lt;app-name&amp;gt; # 命名进程
$ pm2 list # 显示所有进程状态
$ pm2 monit # 监视所有进程
$ pm2 logs # 显示所有进程日志
$ pm2 stop all # 停止所有进程
$ pm2 restart all # 重启所有进程
$ pm2 reload all # 0秒停机重载进程
$ pm2 stop &amp;lt;id|name&amp;gt; # 停止指定的进程
$ pm2 restart &amp;lt;id|name&amp;gt; # 重启指定的进程
$ pm2 startup # 产生 init 脚本 保持进程活着
$ pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)
$ pm2 delete &amp;lt;id|name&amp;gt; # 杀死指定的进程
$ pm2 delete all # 杀死全部进程
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;运行进程的不同方式&quot;&gt;运行进程的不同方式&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pm2 start app.js -i max # 根据有效CPU数目启动最大进程数目
$ pm2 start app.js -i 3 # 启动3个进程
$ pm2 start app.js -x #用fork模式启动 app.js 而不是使用 cluster
$ pm2 start app.js -x -- -a 23 # 用fork模式启动 app.js 并且传递参数 (-a 23)
$ pm2 start app.js --name serverone # 启动一个进程并把它命名为 serverone
$ pm2 stop serverone # 停止 serverone 进程
$ pm2 start app.json # 启动进程, 在 app.json里设置选项
$ pm2 start app.js -i max -- -a 23 #在--之后给 app.js 传递参数
$ pm2 start app.js -i max -e err.log -o out.log # 启动 并 生成一个配置文件
你也可以执行用其他语言编写的app ( fork 模式):
$ pm2 start my-bash-script.sh -x --interpreter bash
$ pm2 start my-python-script.py -x --interpreter python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Solin</name></author><category term="[&quot;Code&quot;]" /><category term="pm2" /><category term="shell" /><summary type="html">pm2 是一个带有负载均衡功能的Node应用的进程管理器。 当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载，pm2是完美的。</summary></entry><entry><title type="html">git常用命令</title><link href="http://localhost:4000/code/2018/03/14/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" rel="alternate" type="text/html" title="git常用命令" /><published>2018-03-14T18:00:00+08:00</published><updated>2018-03-14T18:00:00+08:00</updated><id>http://localhost:4000/code/2018/03/14/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="http://localhost:4000/code/2018/03/14/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">&lt;blockquote&gt;
  &lt;p&gt;Workspace：工作区  &lt;br /&gt;
Index / Stage：暂存区  &lt;br /&gt;
Repository：仓库区（或本地仓库）  &lt;br /&gt;
Remote：远程仓库&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;新建代码库&quot;&gt;新建代码库&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在当前目录新建一个Git代码库
$ git init

新建一个目录，将其初始化为Git代码库
$ git init [project-name]

下载一个项目和它的整个代码历史
$ git clone [url]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;增加删除文件&quot;&gt;增加/删除文件&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加指定文件到暂存区
$ git add [file1] [file2] ...

添加指定目录到暂存区，包括子目录
$ git add [dir]

添加当前目录的所有文件到暂存区
$ git add .

添加每个变化前，都会要求确认
对于同一个文件的多处变化，可以实现分次提交
$ git add -p

删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;代码提交&quot;&gt;代码提交&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;提交暂存区到仓库区
$ git commit -m [message]

提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

提交时显示所有diff信息
$ git commit -v

使用一次新的commit，替代上一次提交
如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;分支&quot;&gt;分支&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出所有本地分支
$ git branch

列出所有远程分支
$ git branch -r

列出所有本地分支和远程分支
$ git branch -a

新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

新建一个分支，并切换到该分支
$ git checkout -b [branch]

新建一个分支，指向指定commit
$ git branch [branch] [commit]

新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

切换到指定分支，并更新工作区
$ git checkout [branch-name]

切换到上一个分支
$ git checkout -

建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

合并指定分支到当前分支
$ git merge [branch]

选择一个commit，合并进当前分支
$ git cherry-pick [commit]

删除分支
$ git branch -d [branch-name]

删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;查看信息&quot;&gt;查看信息&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;显示有变更的文件
$ git status

显示当前分支的版本历史
$ git log

显示commit历史，以及每次commit发生变更的文件
$ git log --stat

搜索提交历史，根据关键词
$ git log -S [keyword]

显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

显示指定文件相关的每一次diff
$ git log -p [file]

显示过去5次提交
$ git log -5 --pretty --oneline

显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

显示指定文件是什么人在什么时间修改过
$ git blame [file]

显示暂存区和工作区的差异
$ git diff

显示暂存区和上一个commit的差异
$ git diff --cached [file]

显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

显示某次提交的元数据和内容变化
$ git show [commit]

显示某次提交发生变化的文件
$ git show --name-only [commit]

显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

显示当前分支的最近几次提交
$ git reflog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;远程同步&quot;&gt;远程同步&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;下载远程仓库的所有变动
$ git fetch [remote]

显示所有远程仓库
$ git remote -v

显示某个远程仓库的信息
$ git remote show [remote]

增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

上传本地指定分支到远程仓库
$ git push [remote] [branch]

强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;撤销&quot;&gt;撤销&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;恢复暂存区的指定文件到工作区
$ git checkout [file]

恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

恢复暂存区的所有文件到工作区
$ git checkout .

重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

新建一个commit，用来撤销指定commit
后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Solin</name></author><category term="[&quot;Code&quot;]" /><category term="git" /><category term="shell" /><summary type="html">Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库</summary></entry><entry><title type="html">我的小站</title><link href="http://localhost:4000/site/2018/01/01/%E6%88%91%E7%9A%84%E5%B0%8F%E7%AB%99/" rel="alternate" type="text/html" title="我的小站" /><published>2018-01-01T00:00:00+08:00</published><updated>2018-01-01T00:00:00+08:00</updated><id>http://localhost:4000/site/2018/01/01/%E6%88%91%E7%9A%84%E5%B0%8F%E7%AB%99</id><content type="html" xml:base="http://localhost:4000/site/2018/01/01/%E6%88%91%E7%9A%84%E5%B0%8F%E7%AB%99/">&lt;p&gt;欢迎访问 &lt;a href=&quot;http://www.solin.site/&quot;&gt;我的小站&lt;/a&gt;。&lt;/p&gt;</content><author><name>Solin</name></author><summary type="html">欢迎访问 我的小站。</summary></entry></feed>